<script>
function validarEmail() {
    // Lógica de tu función existente

    // Ahora, agrega la lógica AJAX para validar el email
    var email = $('#emailSolicitante').val();
    $.ajax({
            url: '@Url.Action("ValidadorEmail", "DocumentosRecibidos")',
            type: 'POST',
            dataType: 'json',
            data: { VerificarEmail: email },
            success: function (data) {
                if (data.success) {
                    // La validación fue exitosa
                    //alert('Email válido');

                    // Accede a los valores de ViewBag en la respuesta JSON
                    var usuarioSolicitanteNombre = data.UsuarioSolicitanteNombre;
                    var usuarioSolicitanteDepartamento = data.UsuarioSolicitanteDepartamento;
                    var usuarioSolicitanteEmail = data.UsuarioSolicitanteEmail;
                    var usuarioSolicitanteId = data.UsuarioSolicitanteId;

                    // Utiliza estos valores como desees, por ejemplo, ponlos en dos div
                    $('#idUsuarioSolicitante').val(usuarioSolicitanteId);
                    $('#nombreDiv').text(usuarioSolicitanteNombre);
                    $('#emailDiv').text(usuarioSolicitanteEmail);
                    $('#departamentoDiv').text(usuarioSolicitanteDepartamento);
                    $('.submit').removeClass('disabled');
                    $('#cuadroUsuarioSolicitante').show();

                    toastr.options = {
                        "closeButton": false,
                        "debug": false,
                        "newestOnTop": false,
                        "progressBar": false,
                        "positionClass": "toastr-bottom-center",
                        "preventDuplicates": false,
                        "onclick": null,
                        "showDuration": "500",
                        "hideDuration": "500",
                        "timeOut": "5000",
                        "extendedTimeOut": "1000",
                        "showEasing": "swing",
                        "hideEasing": "linear",
                        "showMethod": "fadeIn",
                        "hideMethod": "fadeOut"
                    };
                    toastr.info("", "Email encontrado correctamente");

                } else {
                    // La validación falló
                    $('.submit').addClass('disabled');
                    toastr.options = {
                        "closeButton": false,
                        "debug": false,
                        "newestOnTop": false,
                        "progressBar": false,
                        "positionClass": "toastr-bottom-center",
                        "preventDuplicates": false,
                        "onclick": null,
                        "showDuration": "500",
                        "hideDuration": "500",
                        "timeOut": "5000",
                        "extendedTimeOut": "1000",
                        "showEasing": "swing",
                        "hideEasing": "linear",
                        "showMethod": "fadeIn",
                        "hideMethod": "fadeOut"
                    };
                    toastr.error("", "Email no fue encontrado, favor de verificar");
                }
            },
            error: function (xhr, status, error) {
                // Manejar el error de la solicitud y mostrar el mensaje de error
                console.error(xhr.responseText);
                var jsonResponse = JSON.parse(xhr.responseText);
                //alert("Error: " + jsonResponse.message);
            }
        });
    }
</script>

<script>
    $(document).ready(function () {

        //obtener el nombre del radio al que le de click
        $('input[type=radio]').click(function () {
            var name = $(this).attr('name');
            var id = $(this).attr('id');
            var value = $(this).val();

            if (name == 'EstadoComercial') {
                $('#EstadoComercial').val(value);
                if (id == 'RechazadoComercial') {
                    $('#motivo-rechazo').show();
                } else {
                    $('#motivo-rechazo').hide();
                }
                if (id == 'EnRevisionComercial') {
                    $('#observaciones').show();
                } else {
                    $('#observaciones').hide();
                }
            }
            if (name == 'EstadoPago') {
                $('#EstadoPago').val(value);
                if (id == 'RechazadoPago') {
                    $('#motivo-rechazo').show();
                    alert('Rechazado');
                } else {
                    $('#motivo-rechazo').hide();
                }
            }
        });
    });
</script>

<script>
    $(document).ready(function () {
        "use strict";

        // Class definition
        var KTDatatablesIndividuales = function () {
            // Shared variables
            var table;
            var datatable;

            // Private functions
            var initDatatable = function () {
                // Set date data order
                const tableRows = table.querySelectorAll('tbody tr');

                // Init datatable --- more info on datatables: https://datatables.net/manual/
                datatable = $(table).DataTable({
                    "info": false,
                    'order': [],
                    'pageLength': 10,
                });
            }


            // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
            var handleSearchDatatable = () => {
                const filterSearch = document.querySelector('[data-kt-filter-Individuales="search"]');
                filterSearch.addEventListener('keyup', function (e) {
                    datatable.search(e.target.value).draw();
                });
            }

            // Public methods
            return {
                init: function () {
                    table = document.querySelector('#tablaIndividuales');

                    if (!table) {
                        return;
                    }

                    initDatatable();
                    handleSearchDatatable();
                }
            };
        }();

        // On document ready
        KTUtil.onDOMContentLoaded(function () {
            KTDatatablesIndividuales.init();
        });
    });

    $(document).ready(function () {
        "use strict";

        // Class definition
        var KTDatatablesGrupales = function () {
            // Shared variables
            var table;
            var datatable;

            // Private functions
            var initDatatable = function () {
                // Set date data order
                const tableRows = table.querySelectorAll('tbody tr');

                // Init datatable --- more info on datatables: https://datatables.net/manual/
                datatable = $(table).DataTable({
                    "info": false,
                    'order': [],
                    'pageLength': 10,
                });
            }

            // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
            var handleSearchDatatable = () => {
                const filterSearch = document.querySelector('[data-kt-filter-Grupales="search"]');
                filterSearch.addEventListener('keyup', function (e) {
                    datatable.search(e.target.value).draw();
                });
            }

            // Public methods
            return {
                init: function () {
                    table = document.querySelector('#tablaGrupales');

                    if (!table) {
                        return;
                    }

                    initDatatable();
                    handleSearchDatatable();
                }
            };
        }();

        // On document ready
        KTUtil.onDOMContentLoaded(function () {
            KTDatatablesGrupales.init();
        });
    });

    $(document).ready(function () {
        "use strict";

        // Class definition
        var KTDatatablesTodos = function () {
            // Shared variables
            var table;
            var datatable;

            // Private functions
            var initDatatable = function () {
                // Set date data order
                const tableRows = table.querySelectorAll('tbody tr');

                // Init datatable --- more info on datatables: https://datatables.net/manual/
                datatable = $(table).DataTable({
                    "info": false,
                    'order': [],
                    'pageLength': 10,
                });
            }

            // Hook export buttons
            var exportButtons = () => {
                var titulo = document.querySelector(".breadcrumb-item").textContent;
                const documentTitle = titulo;
                var buttons = new $.fn.dataTable.Buttons(table, {
                    buttons: [
                        {
                            extend: 'copyHtml5',
                            title: documentTitle
                        },
                        {
                            extend: 'excelHtml5',
                            title: documentTitle
                        },
                        {
                            extend: 'csvHtml5',
                            title: documentTitle
                        },
                        {
                            extend: 'pdfHtml5',
                            title: documentTitle
                        }
                    ]
                }).container().appendTo($('#kt_datatable_example_buttons'));

                // Hook dropdown menu click event to datatable export buttons
                const exportButtons = document.querySelectorAll('#kt_datatable_example_export_menu [data-kt-export]');
                exportButtons.forEach(exportButton => {
                    exportButton.addEventListener('click', e => {
                        e.preventDefault();

                        // Get clicked export value
                        const exportValue = e.target.getAttribute('data-kt-export');
                        const target = document.querySelector('.dt-buttons .buttons-' + exportValue);

                        // Trigger click event on hidden datatable export buttons
                        target.click();
                    });
                });
            }


            // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
            var handleSearchDatatable = () => {
                const filterSearch = document.querySelector('[data-kt-filter-Todos="search"]');
                filterSearch.addEventListener('keyup', function (e) {
                    datatable.search(e.target.value).draw();
                });
            }

            // Public methods
            return {
                init: function () {
                    table = document.querySelector('#tablaTodos');

                    if (!table) {
                        return;
                    }

                    initDatatable();
                    exportButtons();
                    handleSearchDatatable();
                }
            };
        }();

        // On document ready
        KTUtil.onDOMContentLoaded(function () {
            KTDatatablesTodos.init();
        });
    });

</script>

<script>
    document.addEventListener('keydown', function (event) {
        if (event.ctrlKey && (event.key === 'Enter' || event.keyCode === 13)) {
            event.preventDefault(); // Evitar el envío del formulario
        }
    });
</script>



<script>
    $(document).ready(function () {

        // Detectar el cambio en el dropdown
        $('select[name="DocumentoAsociadoDR.Id"]').change(function () {
            // Obtener el valor seleccionado
            var selectedValue = $(this).val();

            // Si el valor es diferente de la opción predeterminada (que asumo es "")
            if (selectedValue) {
                // Añadir la clase visually-hidden al div con clase .cofco
                $('.cofco').addClass('visually-hidden');
            }
        });

        function updateMerma() {
            var pesoOrigen = $('input[name="PesoOrigen"]').val();
            var pesoDestino = $('input[name="PesoDestino"]').val();
            var mermaExcedente = pesoOrigen - pesoDestino;
            var moneda = $('#MonedaId').val();

            $('input[name="KgMermaExcedente"]').val(mermaExcedente.toFixed(2));


            // Calcular porcentaje de merma
            var mermaPorcentaje = (mermaExcedente / pesoOrigen) * 100;
            var precioContrato = $('#PrecioContrato').val();

            // Actualiza el valor en el div de mermaCalculada
            $('.mermaCalulada').text(mermaExcedente.toFixed(2) + ' Kg');
            $('.mermaPorcentaje').text(mermaPorcentaje.toFixed(2));

            //un alert de mermaPorcentaje que me muestre su valor


            if (mermaPorcentaje < 0.2) {
                $('.permitido').removeClass('visually-hidden');
                $('.excedente').addClass('visually-hidden');
                $('#Referencia').val('Servicio dentro del rango de merma permitida: ' + mermaPorcentaje.toFixed(2) + '%');
            } else {
                $('.permitido').addClass('visually-hidden');
                $('.excedente').removeClass('visually-hidden');
                $('#Referencia').val('Servicio con merma excedente: ' + mermaPorcentaje.toFixed(2) + '%');

                // Calcular y mostrar el valor en ncExcedente
                var ncExcedente = mermaExcedente * precioContrato;
                var ncExcedenteFormatted = ncExcedente.toFixed(2);

                // Concatenar ncExcedente formateado con la moneda
                $('.ncExcedente').text(ncExcedenteFormatted + " " + moneda);

                $('#MermaPorcentaje').val(mermaPorcentaje.toFixed(2));
                $('#MontoNC').val(ncExcedenteFormatted);
            }
        }

        $('#PesoOrigen, #PesoDestino').on('input', function () {
            updateMerma();
        });

        var selectors = document.querySelectorAll("#PesoOrigen, #PesoDestino, #KgMermaExcedente, #PrecioContrato");

        selectors.forEach(function (selector) {
            // Aplica Inputmask a cada elemento
            Inputmask({
                "alias": "decimal",
                "groupSeparator": ",",
                "autoGroup": true,
                "digits": 2,
                "digitsOptional": false,
                "clearMaskOnLostFocus": false
            }).mask(selector);
        });
    });


</script>

