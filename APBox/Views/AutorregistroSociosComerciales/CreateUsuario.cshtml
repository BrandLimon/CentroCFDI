@model API.Catalogos.Usuario

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("CreateUsuario", "AutorregistroSociosComerciales", FormMethod.Post, new { enctype = "multipart/form-data", id = "miForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.GrupoId)
    @Html.HiddenFor(model => model.PerfilId)
    @Html.HiddenFor(model => model.Status, new { @value = API.Enums.Status.Activo })

    <!--begin::Row-->
    <div class="row g-5 g-xl-8">
        <div class="col-12">
            <!--begin::List Widget 2-->
            <div class="card card-stretch card-flush mb-8">
                <!--begin::Body-->
                <div class="card-body pt-2">
                    <!--begin::Alert-->
                    <div class="py-10">
                        <div class="row">
                            <div class="pb-0">
                                <!--begin::Information-->
                                <!--begin::Alert-->
                                <div class="alert bg-light-secondary border border-secondary d-flex flex-column flex-sm-row p-5 mb-10">
                                    <!--begin::Icon-->
                                    <i class="ki-duotone ki-key fs-2hx text-primary me-4 mb-5 mb-sm-0">
                                        <span class="path1"></span>
                                        <span class="path2"></span>
                                    </i>
                                    <!--end::Icon-->
                                    <!--begin::Wrapper-->
                                    <div class="d-flex flex-column pe-0 pe-sm-10">
                                        <!--begin::Title-->
                                        <h5 class="mb-1">Datos de Acceso</h5>
                                        <!--end::Title-->
                                        <!--begin::Content-->
                                        <span>El nombre de usuario será el <span class="badge badge-primary badge-lg">Email</span> de la empresa, asi podemos asegurar que no exista duplicidad.</span>
                                        <span>La contraseña creada para todos los usuarios será <span class="badge badge-primary badge-lg">A12345</span> ellos podrán cambiarla después de entrar al sistema.</span>
                                        <span>Al terminar se enviará un correo con los datos de acceso completos.</span>
                                        <!--end::Content-->
                                    </div>
                                    <!--end::Wrapper-->
                                </div>
                                <!--end::Alert-->
                                <!--end::Information-->
                            </div>
                        </div>
                    </div>
                    <!--end::Alert-->
                    @Html.ValidationSummary(true, "", new { @class = "label-blue-alt", @style = "color:red;" })
                    <!--begin::Item-->
                    <div class="d-flex mb-7 row fv-row">
                        <div class="mb-10 row fv-row">
                            <div class="form-group col-4 fv-row">
                                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "form-label required" })
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="mb-10 row">
                            <div class="form-group col-4 fv-row">
                                @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "form-label required" })
                                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control mb-2" } })
                                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-4 fv-row">
                                @Html.LabelFor(model => model.ApellidoPaterno, htmlAttributes: new { @class = "form-label required" })
                                @Html.EditorFor(model => model.ApellidoPaterno, new { htmlAttributes = new { @class = "form-control mb-2" } })
                                @Html.ValidationMessageFor(model => model.ApellidoPaterno, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-4 fv-row">
                                @Html.LabelFor(model => model.ApellidoMaterno, htmlAttributes: new { @class = "form-label required" })
                                @Html.EditorFor(model => model.ApellidoMaterno, new { htmlAttributes = new { @class = "form-control mb-2" } })
                                @Html.ValidationMessageFor(model => model.ApellidoMaterno, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="mb-10 row">

                            <div class="form-group col-4 fv-row">
                                @Html.LabelFor(model => model.NombreUsuario, htmlAttributes: new { @class = "form-label" })
                                @Html.EditorFor(model => model.NombreUsuario, new { htmlAttributes = new { @class = "form-control readonly", @readonly = "readonly", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.NombreUsuario, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-4 fv-row">
                                @Html.LabelFor(model => model.Celular, htmlAttributes: new { @class = "form-label" })
                                @Html.EditorFor(model => model.Celular, new { htmlAttributes = new { @class = "form-control mb-2" } })
                                @Html.ValidationMessageFor(model => model.Celular, "", new { @class = "text-danger" })
                            </div>

                        </div>
                    </div>
                    <!--end::Item-->
                </div>
                <!--end::Body-->
            </div>
            <!--end::List Widget 2-->
        </div>

    </div>

    <!--end::Row-->
    <!--begin::Row-->
    <div class="d-flex justify-content-end">

        <!--begin::Button-->
        <button type="submit" id="submit" class="btn btn-primary">
            <span class="indicator-label">
                Finalizar
            </span>
        </button>
        <!--end::Button-->
    </div>
    <!--end::Row-->
}

<script>
    $(document).ready(function () {
        function toLowerCaseAndReplicate() {
            // Convierte el texto a minúsculas
            var lowerCaseValue = $(this).val().toLowerCase();
            $(this).val(lowerCaseValue);
            // Si es el campo #Email, replica el valor en #NombreUsuario
            if (this.id === 'Email') {
                $('#NombreUsuario').val(lowerCaseValue);
            }
        }

        // Selecciona todos los elementos con la clase 'minusculas' y el campo #Email
        $('.minusculas, #Email').on('input', toLowerCaseAndReplicate);

        // Añadir evento de pegado para cambiar a minúsculas el texto pegado y replicarlo
        $('.minusculas, #Email').on('paste', function (event) {
            event.preventDefault();
            var text = (event.originalEvent.clipboardData || window.clipboardData).getData('text').toLowerCase();
            var newValue = $(this).val() + text;
            $(this).val(newValue);
            // Si es el campo #Email, replica el valor en #NombreUsuario
            if (this.id === 'Email') {
                $('#NombreUsuario').val(newValue);
            }
        });
    });
</script>