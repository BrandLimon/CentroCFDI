@model API.Operaciones.OperacionesRecepcion.ComprobacionGasto
@using APBox.Context;
@using Aplicacion.LogicaPrincipal.Acondicionamientos.Catalogos;

@{
    var _db = new APBoxContext();
    var usuarioId = Convert.ToInt32(Session["UsuarioId"]);
    var sucursalId = Convert.ToInt32(Session["SucursalId"]);
    var usuario = _db.Usuarios.Find(usuarioId);
    var documentosRecibidos = _db.DocumentosRecibidos.Where(x => x.SucursalId == sucursalId && x.ComprobacionGastoId == Model.Id).ToList();
    ViewBag.ComprobacionGastoId = Model.Id;
    bool todosAprobados = documentosRecibidos.All(doc => doc.EstadoComercial == API.Enums.c_EstadoComercial.Aprobado);
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.SucursalId)
    @Html.HiddenFor(model => model.Clave)
    @Html.HiddenFor(model => model.Folio)
    @Html.HiddenFor(model => model.Estatus, new { @value = API.Enums.c_Estatus.Activo })
    @Html.HiddenFor(model => model.MonedaId)
    @Html.HiddenFor(model => model.Monto)
    @Html.HiddenFor(model => model.Descripcion)
    @Html.HiddenFor(model => model.ProyectoId)
    @Html.HiddenFor(model => model.EventoId)
    @Html.HiddenFor(model => model.UsuarioId)
    @Html.HiddenFor(model => model.DepartamentoId)
    @Html.HiddenFor(model => model.Fecha)



    <div class="card card-stretch card-flush mb-8">
        <!--begin::Card body-->
        <div class="card-body pt-10">

            @if (ViewBag.ErrorMessage != null)
            {
                <div class="alert alert-danger">@ViewBag.ErrorMessage</div>
            }

            <div class="d-flex mb-7 row ">
                <div class="mb-10 row">
                    <div class="h1 col-4">
                        <span class="text-gray-600">Folio</span><br />
                        @usuario.Departamento.Clave - @Model.Folio
                    </div>

                    <div class="h1 col-4">
                        <span class="text-gray-600">Fecha </span><br />
                        @DateTime.Now.ToString("dd/MM/yyyy")
                    </div>

                    <div class="h1 col-4">
                        <span class="text-gray-600">Monto Comprobado </span><br />
                        @Model.Monto.ToString("c") <span class="text-gray-600"> @Model.MonedaId</span>
                    </div>
                </div>

                <div class="separator separator-dashed mb-10"></div>

                <div class="mb-10 row">
                    <div class="h2 col-4">
                        <span class="text-gray-600">Descripción</span><br />
                        @Model.Descripcion
                    </div>

                    <div class="h2 col-4">
                        <span class="text-gray-600">Proyecto</span><br />
                        @if (Model.ProyectoId != null)
                        {
                            @Model.Proyecto.Nombre;
                        }
                    </div>

                    <div class="h2 col-4">
                        <span class="text-gray-600">Evento</span><br />
                        @if (Model.EventoId != null)
                        {
                            @Model.Evento.Nombre;
                        }
                    </div>

                </div>

                <div class="separator separator-dashed mb-10"></div>

                <div class="row">
                    <div class="h2 col-8">
                        <span class="text-gray-600">Comentarios </span><br />
                        @Html.TextAreaFor(model => model.Comentarios, htmlAttributes: new { @class = "form-control textarea mb-2" })
                    </div>

                </div>
            </div>
        </div>
    </div>


    <div class="card card-flush shadow-sm py-4 mb-xl-8 tablas" id="tabla1">
        <!--begin::Card header-->
        <div class="card-header">
            <h3 class="card-title align-items-start flex-column w-100 mb-5">
                <span class="card-label text-gray-900">@documentosRecibidos.Count() documentos asignados a la Comprobación de Gastos</span>
                <span class="text-gray-600 mt-4 fw-semibold fs-6"></span>
            </h3>
            <!--begin::Search-->
            <div class="d-flex align-items-center position-relative my-1">
                <i class="fa fa-magnifying-glass position-absolute ms-4"></i>
                <input type="text" data-kt-filter-Individuales="search" class="form-control form-control-solid w-250px ps-14" placeholder="Buscar" />
            </div>
            <!--end::Search-->

        </div>
        <!--end::Card header-->
        <!--begin::Card body-->
        <div class="card-body pt-0">
            @Html.ValidationSummary(true, "", new { @class = "label-blue-alt", @style = "color:red;" })
            <div class="d-flex flex-column gap-10">
                <table class="table align-middle rounded table-row-dashed fs-7 g-5" id="tablaIndividuales">

                    <thead>
                        <tr class="text-start text-gray-600 fw-bold fs-7 text-uppercase">
                            <th class="min-w-100px">Socio Comercial</th>
                            <th class="min-w-100px">Identificador</th>
                            <th class="min-w-100px">Datos de Recepción</th>
                            <th class="min-w-100px text-end">Monto</th>
                            <th class="min-w-100px text-center">Referencia</th>
                            <th class="min-w-100px text-center">Estado Comercial</th>
                            <th class="min-w-100px"></th>
                        </tr>
                    </thead>

                    <tbody class="align-text-top">
                        @foreach (var item in documentosRecibidos)
                        {
                            var nombreAprobador = AcondicionarUsuarios.ObtenerNombreCompleto(item.AprobacionesDR.UsuarioSolicitante_Id);
                            var nombreDepartamento = _db.Departamentos.Find(item.AprobacionesDR.DepartamentoUsuarioSolicitante_Id).Nombre;
                            <tr>
                                <td>
                                    @switch (item.TipoDocumentoRecibido)
                                    {
                                        case API.Enums.c_TipoDocumentoRecibido.CFDI:
                                            @item.SocioComercial.RazonSocial <br />
                                            <span class="text-gray-600">@item.SocioComercial.Rfc</span>
                                            break;
                                        case API.Enums.c_TipoDocumentoRecibido.ComprobanteNoFiscal:
                                            @Html.Raw("Sin Socio Comercial");
                                            break;
                                        case API.Enums.c_TipoDocumentoRecibido.ComprobanteExtranjero:
                                            break;
                                        default:
                                            break;
                                    }

                                </td>
                                <td>
                                    @switch (item.TipoDocumentoRecibido)
                                    {
                                        case API.Enums.c_TipoDocumentoRecibido.CFDI:

                                            string sf = String.Format("{0} - {1}", item.CfdiRecibidosSerie, item.CfdiRecibidosFolio);
                                            @sf <br />

                                            <span class="text-gray-600">@item.CfdiRecibidosUUID</span> <br />
                                            <span class="text-gray-600">@nombreDepartamento </span><br />

                                            <i class="ki-duotone ki-calendar">
                                                <span class="path1"></span>
                                                <span class="path2"></span>
                                            </i><span class="text-gray-600">@item.FechaComprobante.ToString("dd/MM/yyyy")</span>

                                            break;
                                        case API.Enums.c_TipoDocumentoRecibido.ComprobanteNoFiscal:
                                            <strong>Comprobante No Fiscal</strong> <br />
                                            @Html.Raw("Sin Identificador");
                                            break;
                                        case API.Enums.c_TipoDocumentoRecibido.ComprobanteExtranjero:
                                            break;
                                        default:
                                            break;
                                    }
                                </td>
                                <td>
                                    <strong>Solicitado a:</strong> <br /> @nombreAprobador <br />
                                    <span class="text-gray-600">@nombreDepartamento </span><br />
                                    <i class="ki-duotone ki-calendar">
                                        <span class="path1"></span>
                                        <span class="path2"></span>
                                    </i> <span class="text-gray-600"> @item.FechaEntrega.ToString("dd/MM/yyyy")</span><br />
                                </td>
                                <td class="text-end">
                                    @item.Monto.ToString("c") <br />
                                    <div class="text-gray-600">@item.MonedaId</div>
                                </td>

                                <td class="min-w-100px text-center">
                                    @item.Referencia
                                </td>
                                <td class="text-center">
                                    @switch (item.EstadoComercial)
                                    {
                                        case API.Enums.c_EstadoComercial.Aprobado:
                                            <div class="badge badge-light-success">Aprobado</div>
                                            break;
                                        case API.Enums.c_EstadoComercial.EnRevision:
                                            <div class="badge badge-light-primary">EnRevisión</div>
                                            break;
                                        case API.Enums.c_EstadoComercial.Rechazado:
                                            <div class="badge badge-light-danger">Rechazado</div>
                                            break;
                                        default:
                                            break;
                                    }
                                </td>
                                <td class="text-end">
                                    <a href="#" class="btn btn-sm btn-light btn-flex btn-center btn-active-light-primary" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">
                                        Acciones
                                        <i class="ki-duotone ki-down fs-5 ms-1"></i>
                                    </a>
                                    <!--begin::Menu-->
                                    <div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-semibold fs-7 w-125px py-4" data-kt-menu="true" style="">

                                        <div class="menu-item px-3">@Html.ActionLink("Revisión", "Revision", "DocumentosRecibidos", new { id = item.Id, comprobacionGastoId = ViewBag.ComprobacionGastoid }, new { @class = "menu-link px-3" })</div>
                                        <div class="menu-item px-3">@Html.ActionLink("Descarga Xml", "DescargaXml", new { id = item.Id }, new { @class = "menu-link px-3" })</div>
                                        <div class="menu-item px-3">@Html.ActionLink("Descarga Pdf", "DescargaPDF", new { id = item.Id }, new { @class = "menu-link px-3" })</div>

                                    </div>
                                    <!--end::Menu-->
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!--end::Card header-->
    </div>

    <!--begin::Guardar-->
<div class="d-flex justify-content-end">
    <!--begin::Button-->
    <a href="@Url.Action("Index","ComprobacionesGastos")" class="btn btn-light me-5">
        Cancelar
    </a>
    <!--end::Button-->
    @if (!todosAprobados)
    {
        <input id="Cerrar" name="Cerrar" type="hidden" value="False">
    }
    <!--begin::Button-->
    <button type="submit" class="btn btn-primary">
        <span class="indicator-label">
            Guardar
        </span>
    </button>
    <!--end::Button-->
    @if (todosAprobados)
    {
        <input id="Cerrar" name="Cerrar" type="hidden" value="True">
        <!--begin::Button-->
        <button type="submit" class="ms-5 btn btn-info">
            <span class="indicator-label">
                Guardar y Cerrar Comprobación
            </span>
        </button>
        <!--end::Button-->
    }
</div>
    <!--end::Guardar-->
}

<div class="hiddenDiv">
    <div class="d-flex align-items-center py-3 py-md-1" id="tools">
        <div class="me-4">
            <a href="#" class="btn btn-custom btn-active-white btn-flex btn-color-white btn-active-color-white" data-bs-toggle="modal" data-bs-target="#modal">
                <i class="ki-duotone ki-message-question fs-2 me-1">
                    <span class="path1"></span>
                    <span class="path2"></span>
                    <span class="path3"></span>
                </i>
                Ayuda
            </a>
        </div>
        <!--begin::Button-->
        <a href="@Url.Action("CargaCfdi","DocumentosRecibidos", new {comprobacionGastoId = ViewBag.ComprobacionGastoid })" class="btn btn-secondary">
            Agregar Comprobante
        </a>
        <!--end::Button-->
    </div>
</div>

<script>
    $(document).ready(function () {
        // Seleccionar todos los elementos select y agregar la clase .select2
        $('select').addClass('select');
        // Inicializar select2
        $('.select').select2();
    });
</script>

<script>
    $(document).ready(function () {
        const selectElement = $('#MonedaId');
        const divElement = $('#divMoneda');

        // Obtener el texto de la opción seleccionada por defecto
        const selectedText = $(selectElement).find('option:selected').text();

        // Mostrar el texto en el 'div'
        divElement.html(selectedText);
    });
</script>

@Html.Partial("~/Views/ComprobacionesGastos/_ModalGuia.cshtml")

